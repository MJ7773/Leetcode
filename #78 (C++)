//Back-tracking
class Solution {
public:
    vector<vector<int>> ans;
    vector<vector<int>> subsets(vector<int>& nums) {
        subsets(nums, vector<int>{}, 0);
        return ans;
    }
private:
    void subsets(vector<int>& nums, vector<int> sub, int i) {
        ans.push_back(sub);
        for (int j = i; j < nums.size(); j++) {
            sub.push_back(nums[j]);
            subsets(nums, sub, j+1);
            sub.pop_back();
        }
    }
};  
// T=O(N*(2^N))
// S=O(N*(2^N))

    
    
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size(), p = 1 << n;
        vector<vector<int>> subs(p);
        for (int i = 0; i < p; i++) {
            for (int j = 0; j < n; j++) {
                if ((i >> j) & 1) {
                    subs[i].push_back(nums[j]);
                }
            }
        }
        return subs;
    }
};

// Recursive Solution
// T=O(N*(2^N))
// S=O(N*(2^N))

    
   
   
