// https://leetcode.com/problems/find-subsequence-of-length-k-with-the-largest-sum/description/

// MinHeap
// T=O(NlogN), S=O(k)
class Solution {
public:
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        vector<int> ans;
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> maxSum;

        for(int i=0; i<nums.size(); ++i){ // T=O(n)
            maxSum.push({nums[i], i}); // T=O(logn)
            if(maxSum.size() > k) maxSum.pop(); // T=O(1)
        }

        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> idx;

        while(!maxSum.empty()){
            idx.push({maxSum.top().second, maxSum.top().first});
            maxSum.pop();
        }

        while(!idx.empty()){
            ans.push_back(idx.top().second);
            idx.pop();
        }
        return ans;
    }
};


// vector<int>.min_element()
// T=O(N^2), S=O(k)
class Solution {
public:
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        vector<int> res;

        for(int i=0; i<k; ++i) res.push_back(nums[i]);

        for(int i=k; i<nums.size(); ++i){ // T=O(N)
            int idx = min_element(res.begin(), res.end()) - res.begin(); // T=O(N)
            if(res[idx] < nums[i]){
                res.erase(res.begin()+idx);
                res.push_back(nums[i]);
            }
        }
        return res;
    }
};
