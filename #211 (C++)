// https://leetcode.com/problems/design-add-and-search-words-data-structure/description/

// T=O(N)

class TrieNode{
public:
    map<char, TrieNode*> child;
    bool isWord;
    TrieNode(){
        isWord = false;
    }
};

class WordDictionary {
private:
    TrieNode *root;

public:
    WordDictionary() {
        root = new TrieNode();
    }
    
    void addWord(string word) {
        TrieNode *node = root;
        for(char c : word){
            if(!node->child.count(c)) node->child[c] = new TrieNode();
            node = node->child[c];
        }
        node->isWord = true;
    }

    bool searchInNode(string word, TrieNode* node){
        for(int i=0; i<word.size(); ++i){
            char c = word[i];
            if(!node->child.count(c)){
                // if no char is in child
                if(c == '.'){
                    // traverse all the child node
                    for(auto childNode : node->child){
                        TrieNode* child = childNode.second;
                        if(searchInNode(word.substr(i+1), child)) return true;
                    }
                }
                return false;
            }
            else{
                node = node->child[c];
            }
        }
        return node->isWord;
    }
    bool search(string word) {
        return searchInNode(word, this->root);
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
