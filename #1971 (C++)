https://leetcode.com/problems/find-if-path-exists-in-graph/submissions/

//Union-Find T=O(n) S=O(n)
class Solution {
public:
    vector<int> parents;
    
    int find(int v){
        if(v == parents[v]) return v;
        return find(parents[v]); //update root of joint sets & return the root
    }
    
    void Union(int v1, int v2){
        int root1 = find(v1);
        int root2 = find(v2);
        
        if(root1==root2) return ;
        
        if(root1 < root2) parents[root2] = parents[v2] = root1;
        else parents[root1] = parents[v1] = root2;
    }
      
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        parents.resize(n);
        iota(parents.begin(), parents.end(), 0);

        for(int i=0; i<edges.size(); ++i) Union(edges[i][0], edges[i][1]);
      
        
        int root1 = find(source);
        int root2 = find(destination);
        
        return (root1==root2);
    }
};


//BFS T=O(n) S=O(n)
class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        vector<vector<int>> graph(n);
        vector<bool> visited(n,0);
        
        for(int i=0; i<edges.size(); ++i){ //set graph
            graph[edges[i][0]].push_back(edges[i][1]);
            graph[edges[i][1]].push_back(edges[i][0]);
        }
                
        queue<int> q;
        q.push(source);
        visited[source] = 1;

        while(!q.empty()){
            int v = q.front();
            q.pop();
            
            if(v==destination) return true;
            
            for(int i=0; i<graph[v].size(); ++i){
                if(visited[graph[v][i]]==0){
                    q.push(graph[v][i]);
                    visited[graph[v][i]] = 1;
                }
            }
        }
        return false;
    }
};



//DFS T=O(n) S=O(n)
class Solution {
public:
    vector<vector<int>> graph;
    vector<bool> visited; // To track cycles
    
    bool dfs(int v1, int v2){
        if(v1==v2) return true;
        else if(visited[v1]) return false;
        
        visited[v1] = true;
        
        for(int i=0; i<graph[v1].size(); ++i) 
            if(dfs(graph[v1][i], v2)) return true;
        return false;
    }
       
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        graph.resize(n);
        visited.resize(n, 0);
        
        for(int i=0; i<edges.size(); ++i){ //set graph
            graph[edges[i][0]].push_back(edges[i][1]);
            graph[edges[i][1]].push_back(edges[i][0]);
        }
                
        return dfs(source, destination);
    }
};
