//https://leetcode.com/problems/coin-change/description/

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        if(amount==0) return 0;

        vector<int> cnt(amount+1, amount+1);
        cnt[0] = 0;

        for(int i=1; i<=amount; ++i){ //O(#amount)
            for(int j=0; j<coins.size(); ++j){ //O(#coins)
                int c = i - coins[j]; //changes
                if(c >= 0) cnt[i] = min(cnt[i], cnt[c]+1);
            }
        }
        
        if(cnt[amount] == amount+1) return -1;
        return cnt[amount];
    }
};

// T=O(amount * #coins), S=O(amount)

==============================================


class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        if(amount==0) return 0;

        int dp[amount+1];
        dp[0] = 0;
        sort(coins.begin(), coins.end()); //O(nlogn)

        for(int i=1; i<=amount; ++i){
            dp[i] = INT_MAX;
            for(auto coin : coins){
                if(i-coin < 0) break;
                if(dp[i-coin] != INT_MAX) dp[i] = min(dp[i], dp[i-coin]+1);
            }
        }
        return dp[amount]==INT_MAX ? -1 : dp[amount];
    }
};

//T=O(coins * amount)
