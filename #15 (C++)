//https://leetcode.com/problems/3sum/description/

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int> > res;
        int len = nums.size();
        sort(nums.begin(), nums.end()); //O(nlogn)

        for(int i=0; i<len; ++i){
            int target = -nums[i]; //attempt to finding target so a[i]+(target==-a[i])=0
            int j = i+1;
            int k = len-1;

            while(j<k){
                int sum = nums[j] + nums[k];
                if(sum < target) ++j;
                else if(sum > target) --k;
                else{ // sum==target
                    vector<int> triplet = {nums[i], nums[j], nums[k]};
                    res.push_back(triplet);
                    while (j<k && nums[j] == triplet[1]) ++j;
                    while (j<k && nums[k] == triplet[2]) --k;
                }
            }
            while (i+1<len && nums[i+1] == nums[i]) ++i; 
        }
        return res;
    }
};

// T=O(n^2), S=O(1)
