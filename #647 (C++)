https://leetcode.com/problems/palindromic-substrings/submissions/

// Manacher's Algorithm
// T=O(N)
class Solution {
public:
    int countSubstrings(string s) {
        if(s.size() <= 1) return s.size();

        s = regex_replace(s, regex(""), "#");
        vector<int> dp(s.size(), 0);
        int center = 0; // the center index of the current palindrome
        int right = 0; // the rightmost index of the current palindrome

        for(int i=0; i<s.size(); ++i){
            if(i < right) dp[i] = min(right-i, dp[2*center-i]);
            while(i-dp[i]-1 >= 0 && i+dp[i]+1 < s.size() && s[i-dp[i]-1]==s[i+dp[i]+1]){
                // if we can expand to left &&
                // if we can expand to right &&
                // if the left == right
                ++dp[i];
            }

            if(i+dp[i] > right){
                center = i;
                right = i+dp[i];
            }
        }
        
        int subs = 0;
        for(int r : dp) subs += (r+1)/2;
        return subs;
    }
};

//DP, T=O(n^2)
class Solution {
public:
    int countSubstrings(string s) {
        int ans=s.size();
        vector<vector<bool>> dp(s.size(),vector<bool>(s.size()));
        for(int i=0; i<s.size(); ++i) dp[i][i] = true;
        
        for(int i=1; i<s.size(); ++i){
            for(int j=i-1; j>=0; --j){
                if(s[i]==s[j]){
                    if(dp[i-1][j+1]||i-j==1){
                        dp[i][j] = true;
                        ans++;
                    }
                }
            }
        }
        return ans;
    }
};
