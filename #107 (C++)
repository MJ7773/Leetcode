//BFS

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int depth(TreeNode* node){
        if(!node) return 0;
        return max(depth(node->left), depth(node->right)) + 1;
    }
    
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        if(!root) return {};
        
        int d = depth(root);
        
        vector<vector<int>> res(d);
        queue<TreeNode*> q;
        q.push(root);
        
        res[d-1].push_back(root->val);
        d--;
        q.push(NULL);
        
        while(!q.empty()){
            root = q.front();
            q.pop();
            
            if(!root){
                if(q.empty()) break;
                d--;
                q.push(NULL);
            }
            else{
                if(root->left){
                    res[d-1].push_back(root->left->val);
                    q.push(root->left);
                }
                if(root->right){
                    res[d-1].push_back(root->right->val);
                    q.push(root->right);
                }
            }
        }
        return res;
    }
};

// DFS

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int depth(TreeNode *root) {
        if (!root) return 0;
        return max(depth(root->left),depth(root->right))+1;
    }

    void levelOrder(vector<vector<int>> &ans, TreeNode *node, int level) {
        if (!node) return;
        ans[level].push_back(node->val);
        levelOrder(ans,node->left,level-1);
        levelOrder(ans,node->right,level-1);
    }

    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        int d = depth(root);
        vector<vector<int>> ans(d,vector<int> {});
        levelOrder(ans,root,d-1);
        return ans;
    }
        }
};



