https://leetcode.com/problems/longest-palindromic-substring/submissions/

// Manacher's Algorithm
// T=O(N)
class Solution {
public:
    string longestPalindrome(string s) {
        if(s.size() <= 1) return s;

        int maxlen = 1;
        string maxstr = s.substr(0,1);
        s = "#" + regex_replace(s, regex(""), "#") + "#";
        vector<int> dp(s.size(), 0);
        int center = 0; // the center index of the current palindrome
        int right = 0; // the rightmost index of the current palindrome

        for(int i=0; i<s.size(); ++i){
            if(i < right) dp[i] = min(right-i, dp[2*center-i]);
            while(i-dp[i]-1 >= 0 && i+dp[i]+1 < s.size() && s[i-dp[i]-1]==s[i+dp[i]+1]){
                // if we can expand to left &&
                // if we can expand to right &&
                // if the left == right
                ++dp[i];
            }

            if(i+dp[i] > right){
                center = i;
                right = i+dp[i];
            }

            if(dp[i] > maxlen){
                maxlen = dp[i];
                maxstr = s.substr(i-dp[i], 2*dp[i]+1);
            }
        }
        maxstr.erase(remove(maxstr.begin(), maxstr.end(), '#'), maxstr.end());
        return maxstr;
    }
};

// Expand around center
// T=O(N^2), S=O(1)
class Solution {
public:
    string longestPalindrome(string s) {
        if(s.length() <= 1) return s;

        auto expand_from_center = [&](int left, int right){
            while(left>=0 && right<s.length() && s[left]==s[right]){
                --left;
                ++right;
            }
            return s.substr(left+1, right-left-1);
        };

        string maxPal = s.substr(0,1); // substr = O(n)
        
        for(int i=0; i<s.length()-1; ++i){ // consider all chars as a center
            string odd = expand_from_center(i, i);
            string even = expand_from_center(i, i+1); 
            // if the string has even number of chars then regard the two chars as a center

            if(odd.length() > maxPal.length()) maxPal = odd;
            if(even.length() > maxPal.length()) maxPal = even;
        }
        return maxPal;
    }
};

//DP, T=S=O(n^2), S=O(n^2)
class Solution {
public:
    string longestPalindrome(string s) {
        int len = s.size();
        bool dp[len][len]; // dp[i][j]='true' if the string from index i to j is a palindrome.
        memset(dp, 0, sizeof(dp));
        
        string ans="";
        ans += s[0];
        
        for(int i=0; i<len; ++i) dp[i][i] = true;
         
        for(int i=1; i<len; ++i){
            for(int j=i-1; j>=0; --j){
                if(s[i] == s[j]){
                    if(i-j==1 || dp[i-1][j+1]){
                        dp[i][j] = true;
                        if(i-j+1 > longestPal.size()) longestPal = s.substr(j, i-j+1);
                    } 
                }
            }
        }
        return ans;
    }
};
