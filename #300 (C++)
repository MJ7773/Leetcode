https://leetcode.com/problems/longest-increasing-subsequence/submissions/

//dp
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int max_seq = 1;
        int len = nums.size();
        vector<int> dp(len, 1);

        for(int i=0; i<len; ++i){
            for(int j=0; j<i; ++j){
                if(nums[j]<nums[i] && dp[i]<dp[j]+1){
                    dp[i] = dp[j]+1;
                    max_seq = max(max_seq, dp[i]);
                } 
            }
        }
        return max_seq;
    }
};
// T=O(n^2)

===========================================================
//Greedy+Binary Search(lower_bound)
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> sub;
        for(int n : nums){ //O(n)
            if(sub.empty() || sub[sub.size()-1] < n) sub.push_back(n);
            else{
                int idx = lower_bound(sub.begin(), sub.end(), n)-sub.begin(); //T(lower_bound) = O(log n) 
                sub[idx] = n;
            }
        }
        return sub.size();
    }
};

T=O(nlogn)
