// https://leetcode.com/problems/merge-k-sorted-lists/description/

// Using Heap, T=O(nlogk)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    	ListNode* mergeKLists(vector<ListNode*>& lists) {
        // min priority queue 

/*
        struct compare{
            bool operator()(ListNode* a, ListNode* b){
                return a->val > b->val;
            }
        };
        priority_queue<ListNode*, vector<ListNode*>, compare> q;

        auto cmp = [](ListNode* a, ListNode* b){return a->val > b->val;}; // if a>b then swap
        priority_queue<ListNode*, vector<ListNode*>, decltype(cmp)> q;
*/

        for(int i = 0; i < lists.size(); i++)
            if(lists[i] != nullptr) 
                q.push(lists[i]);
        ListNode* dummy = new ListNode(0);
        ListNode* cursor = dummy;
        while(!q.empty()){
            ListNode* curr = q.top();
            q.pop();
            if(curr->next != nullptr) q.push(curr->next);
            cursor->next = curr;
            cursor = curr;
        }
        return dummy->next;
    }
};


// Mergesort t = O(nlogn)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty()) return nullptr;
        return mergeHelper(lists, 0, lists.size()-1);
    }

    ListNode* mergeHelper(vector<ListNode*>& lists, int start, int end){
        if(start == end) return lists[start];
        if(start+1 == end) return merge(lists[start], lists[end]);
        int mid = start + (end-start) / 2;
        ListNode* left = mergeHelper(lists, start, mid);
        ListNode* right = mergeHelper(lists, mid+1, end);
        return merge(left, right);
    }

    ListNode* merge(ListNode* l1, ListNode* l2){
        ListNode* head = new ListNode();
        ListNode* curr = head;

        while(l1 && l2){
            if(l1->val < l2->val){
                curr->next = l1;
                l1 = l1->next;
            }
            else{
                curr->next = l2;
                l2 = l2->next;
            }
            curr = curr->next;
        }
        curr->next = l1 ? l1 : l2;
        return head->next;
    }
};
