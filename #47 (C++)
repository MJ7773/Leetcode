class Solution {
public:
    vector<vector<int>> res;
        
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        backtracking(nums, nums.size(), 0);
        return res;
    }
    
private:
    void backtracking(vector<int> nums, int len, int idx){
        if(idx==len-1){
            res.push_back(nums);
            return ;
        }
        for(int i=idx; i<len; ++i){
            if(i!=idx && nums[i]==nums[idx]) continue;
            swap(nums[idx], nums[i]);
            backtracking(nums, len, idx+1);
        }
    }
};
