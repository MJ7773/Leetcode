https://leetcode.com/problems/sort-list/submissions/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:
    ListNode* MergeSort(ListNode* l1, ListNode*l2){ //O(n*logn)
        ListNode* newhead = new ListNode(0);
        ListNode* curr = newhead;
        
        while(l1!=NULL && l2!=NULL){
            if(l1->val < l2->val){
                curr->next = l1;
                l1 = l1->next;
            }
            else{
                curr->next = l2;
                l2 = l2->next;
            }
            curr = curr->next;
        }
        
        if(l1!=NULL) curr->next = l1;
        else if(l2!=NULL) curr->next = l2;
        
        return newhead->next;
    }
     
public:
    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL) return head;
        
        ListNode* half = NULL;
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast!=NULL && fast->next!=NULL){
            half = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        half->next = NULL; //end of the left half
        
        ListNode* l1 = sortList(head);
        ListNode* l2 = sortList(slow);
        
        return MergeSort(l1, l2);  
    }
};
