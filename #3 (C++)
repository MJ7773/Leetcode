// https://leetcode.com/problems/longest-substring-without-repeating-characters/description/


// sliding window + integer array
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n = s.length();
        int maxlen = 0;
        vector<int> charIdx(128, -1); 
        // restriction: s consists of English letters, digits, symbols and spaces.
        // there're 128 ASCII codes 
        
        int left = 0;

        for(int right=0; right<n; ++right){
            if(charIdx[s[right]] >= left) left = charIdx[s[right]] + 1;

            charIdx[s[right]] = right;
            maxlen = max(maxlen, right-left+1);
        }
        return maxlen;
    }
};

//tmmzuxt

// sliding window + unordered_map
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n = s.length();
        int maxlen = 0;
        unordered_map<char, int> charMap;
        int left = 0;

        for(int right=0; right<n; ++right){
            if(charMap.count(s[right]) == 0 || charMap[s[right]] < left){
                charMap[s[right]] = right;
                maxlen = max(maxlen, right-left+1);
            }
            else{
                left = charMap[s[right]] + 1;
                charMap[s[right]] = right;
            }
        }
        return maxlen;
    }
};


// sliding window  + unordered_set
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n = s.length();
        int maxlen = 0;
        unordered_set<char> charSet;
        int left = 0;

        for(int right=0; right<n; ++right){
            if(charSet.count(s[right]) == 0){
                charSet.insert(s[right]);
                maxlen = max(maxlen, right-left+1);
            }
            else{
                while(charSet.count(s[right])){
                    charSet.erase(s[left]);
                    ++left;
                }
                charSet.insert(s[right]);
            }
        }
        return maxlen;
    }
};

