/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        if(!root) return {};
        
        vector<int> res;
        queue<TreeNode*> q;
        TreeNode* next;
        
        q.push(root);
        q.push(NULL);
        
        while(!q.empty()){
            root = q.front();
            q.pop();
            
            if(!root){
                if(q.empty()) return res;
                q.push(NULL);
                continue;
            }
            next = q.front();
            if(!next) res.push_back(root->val);
            
            if(root->left) q.push(root->left);
            if(root->right) q.push(root->right);
        }
        return res;
    }
};


//DFS
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    vector<int> res;
    
    void dfs(TreeNode* node, int d){
        if(!node) return ;
        
        if(res.size()==d) res.push_back(node->val);
        
        dfs(node->right, d+1);
        dfs(node->left, d+1);
    }
    
    vector<int> rightSideView(TreeNode* root) {
        if(!root) return {};
        
        dfs(root, 0);
        
        return res;
    }
};
