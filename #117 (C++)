//BFS
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return {};
        
        
        Node* curr;
        Node* link;
        queue<Node*> q;
        
        q.push(root);
        q.push(NULL);
        
        while(!q.empty()){
            curr = q.front();
            q.pop();
            
            if(!curr){
                if(q.empty()) return root;
                q.push(NULL);
                continue;
            }
            
            if(curr->left) q.push(curr->left);
            if(curr->right) q.push(curr->right);
            
            link = q.front();
            curr->next = link;
            
        }    
        return root;
    }
};



/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return {};
        
        Node *curr=root, *head=NULL, *tail=NULL;
        
        while(curr){
            if(curr->left){
                if(tail) tail = tail->next = curr->left;
                else head = tail = curr->left;
            }
            if(curr->right){
                if(tail) tail = tail->next = curr->right;
                else head = tail = curr->right;
            }
            if(!(curr=curr->next)){
                curr = head;
                head = tail = NULL;
            }
        }
        return root;
    }
};
