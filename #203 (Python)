### https://leetcode.com/problems/remove-linked-list-elements/description/

#######################################################################################
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:
        while head and head.val == val :
            head = head.next

        prev = None
        curr = head

        while curr:
            if curr.val == val :
                prev.next = curr.next
            else :
                prev = curr
            curr = curr.next

        return head


#######################################################################################
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:
        while head and head.val == val :
            head = head.next

        curr = head

        while curr and curr.next:
            if curr.next.val == val:
                curr.next = curr.next.next
            else :
                curr = curr.next

        return head

#######################################################################################
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:
        res = ListNode()
        ptr = res

        while head:
            if head.val != val:
                ptr.next = head
                ptr = ptr.next
            head = head.next
        ptr.next = None
        
        return res.next
