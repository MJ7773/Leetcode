class Solution {
public:
	vector<vector<int>> combine(int n, int k) {
		vector<vector<int>> result;
		int i = 0;
		vector<int> p(k, 0);
		while (i >= 0) {
			p[i]++;
			if (p[i] > n) --i;
			else if (i == k - 1) result.push_back(p);
			else {
			    ++i;
			    p[i] = p[i - 1];
			}
		}
		return result;
	}
};


class Solution {
public:
    vector<vector<int>> res;
    
    vector<vector<int> > combine(int n, int k) {
        vector<int> sub;
        combine(n, k, sub, 1);
        return res;
    }
    
    void combine(int n, int k, vector<int>& sub, int num){
        if(sub.size()==k){
            res.push_back(sub);
            return;
        }
        for(int i=num; i<=n; i++){
            sub.push_back(i);
            combine(n, k, sub, i+1);
            sub.pop_back();
            }
        }
};
