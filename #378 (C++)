//https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/description/

//Binary Search , T=O((n+n)*logD) , S=O(1) where D=difference betw the max element and the min element in the matrix (-10^9 <= matrix[i][j] <= 10^9)

class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int n = matrix.size();
        int min = matrix[0][0];
        int max = matrix[n-1][n-1];

        while(min<=max){
            int mid = (max + min) / 2;
            int cnt = 0;

            for(int i=0; i<n; ++i){
                if(matrix[i][0] > mid) break;
                for(int j=0; j<n; ++j){
                    if(matrix[i][j] <= mid) ++cnt;
                }
            }
            if(cnt < k) min = mid+1;
            else max = mid-1;
        }
        return min;
    }
};

//Max Heap , T=O(n*n*logK) , S=O(K)
class Solution { 
public:
    int kthSmallest(vector<vector<int>> &matrix, int k) {
        int n = matrix.size();
        priority_queue<int> maxHeap;
        for (int i=0; i<n; ++i) {
            for (int j=0; j<n; ++j) {
                maxHeap.push(matrix[i][j]); //O(logN)
                if (maxHeap.size() > k) maxHeap.pop(); //O(logN)
            }
        }
        return maxHeap.top();
    }
};
