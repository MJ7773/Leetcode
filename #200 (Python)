## https://leetcode.com/problems/number-of-islands/description/

## BFS T=O(mn)
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int: 

        m, n = len(grid), len(grid[0])
        q = deque()
        dirs = [[1,0], [-1,0], [0, 1], [0, -1]]
        numIsland = 0

        def bfs():
            while q:
                x, y = q.popleft()

                for r, c in dirs:
                    tx = x + r
                    ty = y + c
                    
                    if tx<0 or ty<0 or tx>=m or ty>=n or grid[tx][ty]=='0': continue
                    grid[tx][ty] = '0'
                    q.append((tx, ty))

        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    q.append((i,j))
                    grid[i][j] = '0'
                    numIsland += 1
                    bfs()

        return numIsland


## DFS T=O(mn)
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int: 

        m, n = len(grid), len(grid[0])

        def dfs(x, y):
            if x<0 or y<0 or x==m or y==n or grid[x][y]=='0': return

            grid[x][y] = '0'
            dfs(x+1, y)
            dfs(x-1, y)
            dfs(x, y+1)
            dfs(x, y-1)
            
        numIsland = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    numIsland += 1
                    dfs(i, j)

        return numIsland


