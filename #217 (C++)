#include <map>

/*********** Sorting *********/
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(begin(nums), end(nums)); ////////////////////worst-case runtime of std::sort() is in O(n log n)
        for(int i=1; i<nums.size(); i++){ ///////////////worst-case O(n)
            if(nums[i]==nums[i-1]) return true;
        }
        return false;
    }
};

/////Time complexity: O(nlogn + n) => O(nlogn)///// 
/////Space complexity: O(1)////////


/*********************** Hash Table
#include <map>

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        unordered_set<int> s;
        for(int num : nums){ //////////////////////////worst-case O(n)
            if(!s.insert(num).second) return true;
        }
        return false;
    }
};

/////Time complexity: O(n)//////
/////Space complexity: O(n)/////

**************************/
