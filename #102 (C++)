//BFS
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(!root) return {};
        
        vector<vector<int>> res;
        vector<int> level;
        queue<TreeNode*> q;
        
        q.push(root);
        q.push(NULL);
        
        while(!q.empty()){
            root = q.front();
            q.pop();
            
            if(!root){
                res.push_back(level);
                if(q.empty()) return res;
                level.resize(0);
                q.push(NULL);
            }
            else{
                level.push_back(root->val);
                if(root->left) q.push(root->left);
                if(root->right) q.push(root->right);
                }
            }
        return res;
    }
};

//DFS
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> res;
    
    void dfs(TreeNode* node, int depth){
        if(!node) return ;
        if(res.size()==depth) res.push_back(vector<int>());
        
        res[depth].push_back(node->val);
        dfs(node->left, depth+1);
        dfs(node->right, depth+1);        
    }
    
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(!root) return {};
        dfs(root,0);      
        return res;
    }
};
