https://leetcode.com/problems/word-break/submissions/


//T=O(n^3) : DP itself is T=O(n^2) but substr takes O(n)
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        int n = s.size();
        vector<bool> dp(n+1, false);
        dp[0] = true;
       
        for(int i=1; i<=n; ++i){
            for(int j=i-1; j>=0; --j){
                if(dp[j]){
                    string str = s.substr(j, i-j); //T=O(n)
                    if(find(wordDict.begin(), wordDict.end(), str) != wordDict.end()){ //find: T=O(n)
                        dp[i] = true;
                        break; // start searching for the next i
                    }
                }
            }
        }
        return dp[n];
    }
};
