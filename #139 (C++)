https://leetcode.com/problems/word-break/submissions/

/////////////////////////////////////////////////////////
//T=O(mn^2) : DP itself is T=O(n*m) but substr takes O(n)
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        int len = s.size();
        vector<bool> dp(len+1, false);
        dp[0] = true;

        for(int i=0; i<len; ++i){ //T=O(n)
            if(dp[i]){
                for(auto word : wordDict){ // T=O(m)
                    if( i + word.size() <= len && s.substr(i, word.size())==word){ // T(substr) = O(n)
                        dp[i + word.size()] = dp[i];
                    }
                }
            }
        }

        return dp[len];
    }
};

///////////////////////////////////////////////////////////////////
//T=O(m^2n^2) : DP itself is T=O(n*m) but substr takes O(n)
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        int n = s.size();
        vector<bool> dp(n+1, false);
        dp[0] = true;
       
        for(int i=1; i<=n; ++i){ //T=O(n)
            for(int j=i-1; j>=0; --j){ //T=O(m)
                if(dp[j]){
                    string str = s.substr(j, i-j); //T=O(n)
                    if(find(wordDict.begin(), wordDict.end(), str) != wordDict.end()){ // vector.find: T=O(m)
                        dp[i] = true;
                        break; // start searching for the next i
                    }
                }
            }
        }
        return dp[n];
    }
};
