// https://leetcode.com/problems/circular-array-loop/description/
// T=O(n), S=O(1)

class Solution {
public:

    // Next Index Calculation
    int next(vector<int>& nums, int i){
        int n = nums.size();
        return ( (i+nums[i]%n) + n) %n;
        // nums[i] % n: Ensures the index wraps around within the bounds of the array size
        // i + nums[i]%n : calculate index
        // ((i+nums[i]%n) + n) : make sure the calculated index is not negative
        // ((i+nums[i]%n) + n) %n : wraps aroudn the index
    }
    bool circularArrayLoop(vector<int>& nums) {
        int n = nums.size();
        for(int i=0; i<n; ++i){
            int slow = i;
            int fast = next(nums, i);

            // check if current move is in the same dir && will be the same dir
            while( nums[slow] * nums[fast] > 0 && nums[slow] * nums[next(nums, fast)] > 0){
                if( slow ==  fast){
                    if(slow != next(nums, slow)) return true;
                    break;
                }
                slow = next(nums, slow);
                fast = next(nums, next(nums,fast));
            }
        }
        return false;
    }

};
